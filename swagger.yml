#This is the header of the file, whose main goal is to display important information
#about the .yml file.
swagger: "2.0"
info:
  description: "Stuedent Service API's Documentation"
  version: "1.0.0"
  title: "Swagger Student Service API"
  termsOfService: "Terms"
  contact:
    email: "ebarahona@utn.ac.cr"
host: "localhost:5001"
basePath: "/booking_api"
#The tags are the identifiers for the paths that are created, this will assign a path with a unique tag,
#meaning that, an specific end-point belongs to a tag or identifier
tags:
  - name: "Zone"
    description: "All Zone's Endpoints"
  - name: "Reports"
<<<<<<< HEAD
  - name: "Users"
    description: "All users's Endpoints"
=======
  - name: "Auth"
    description: "Auth paths"
#the schemes will define the protocol that are been used by the end-points inside the API
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
schemes:
  - "https"
  - "http"
#The definitions will display the information that the end-points will return, all along with the
#corresponding messages of the errors.
definitions:
  Response:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ZoneGet"
      message:
        type: string
        example: "Successfully requested"
      message_code:
        type: string
        example: "OK_MSG"
  ErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
      message_code:
        type: string
  InvalidIdErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Invalid Id"
      message_code:
        type: string
        example: "INVALID_ID"
  InternalErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Internal server error"
      message_code:
        type: string
        example: "INTERNAL_SERVER_ERROR_MSG"
  ZoneGet:
    type: object
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: Laboratories Zone
  ZonePost:
    type: object
    required:
      - "_id"
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: "Laboratories Zone"
<<<<<<< HEAD
  UsersGet:
    type: object
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: Laboratories Zone
  UsersPost:
    type: object
    required:
      - "_id"
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: "Laboratories Zone"
=======
  AuthGet:
    type: object
    properties:
      email: 
        type: string
        example: "semataoe@est.utn.ac.cr"
      password: 
        type: string
        example: "47IR39Rt38"
      tocken:
        type: string
        example: "394FDJ347SL34"
  AuthPost: 
    type: object
    required:
      - "email"
      - "password"
    properties:
      email:
        type: string
        example: "semataoe@es.utn.ac.cr"
      password:
        type: string
        example: "47IR39Rt38"
  ReportGet:
    type: object
    properties:
      _id: 
        type: string
        example: "45HJ23IK"
      zone: 
        type: array
        items:
          $ref: "#/definitions/ZoneGet"
      description:
        type: string
        example: "Iphone 12 proMax with yellow case"
      photo:
        type: string
        example: "http://localhost:5001/photo.png"
      status: 
        type: string
        example: "ONF"
  ReportPost: 
    type: object
    required:
      - "_id"
      - "zone"
    properties:
      _id: 
        type: string
        example: "45HJ23IK"
      zone: 
        type: array
        items:
          $ref: "#/definitions/ZoneGet"
      description:
        type: string
        example: "Iphone 12 proMax with yellow case"
      photo:
        type: string
        example: "http://localhost:5001/photo.png"
      status: 
        type: string
        example: "ONF"
#The paths are the ones with all the information of the CRUD methods of the end-points
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
paths:
  /zone:
    get:
      tags:
        - "Zone"
      summary: "Get list of all Zones"
      description: "Get list of all Zones"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of the zones"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Zone"
      parameters:
        - in: "body"
          name: "body"
          description: "Zone object needs to be added"
          required: true
          schema:
            $ref: "#/definitions/ZonePost"
      summary: "Create a Zone"
      description: "Create a Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Zone succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Zone successfully created"
                  message_code:
                    example: "ZONE_SUCCESSFULLY_CREATED"
        "409":
          description: "Zone already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone aready exist"
                  message_code:
                    example: "ZONE_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /zone/{zone_id}:
    get:
      tags:
        - "Zone"
      summary: "Find zone by ID"
      description: "Returns a single Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zone_id"
          in: "path"
          description: "ID of zone to return"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Get single zone successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
        "404":
          description: "Zone not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "ZONE_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Zone"
      summary: "Delete zone by ID"
      description: "Returns a deleted zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zone_id"
          in: "path"
          description: "ID of zone to delete"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Zone successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Zone successfully deleted"
                  message_code:
                    example: "ZONE_SUCCESSFULLY_DELETED"
        "404":
          description: "Country not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "ZONE_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
<<<<<<< HEAD
  /users:
    get: 
      tags:
        - "Users"
      summary: "Get list of all the users"
      description: "Get list of all users"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of the users"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Users"
      parameters:
        - in: "body"
          name: "body"
          description: "Users Objects need to be added"
          required: true
          schema:
            $ref: "#/definitions/UsersPost"
      summary: "Create an user"
      description: "Create an user"
=======
  /Auth: 
    post:
      tags:
        - "Auth"
      parameters:
        - in: "body"
          name: "body"
          description: "Post Method to authenticate user with email&password"
          required: true
          schema:
            $ref: "#/definitions/AuthPost"
      summary: "Generate the authentication post method"
      description: "Create Auth"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
<<<<<<< HEAD
          description: "User was succesfully created"
=======
          description: "Authentication Succesfully"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
<<<<<<< HEAD
                    $ref: "#/definitions/UsersGet"
                  message:
                    example: "User was successfully created"
                  message_code:
                    example: "USER_SUCCESSFULLY_CREATED"
        "409":
          description: "User already exists"
=======
                    $ref: "#/definitions/AuthGet"
                  message:
                    example: "Authentication succeed"
                  message_code:
                    example: "AUTH_SUCCEED"
        "409":
          description: "Credentials did not match"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
<<<<<<< HEAD
                    example: "User aready exists"
                  message_code:
                    example: "USER_ALREADY_EXISTS"
=======
                    example: "Auth not Succeed"
                  message_code:
                    example: "AUTHENTICATION NOT CORRECT"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse" 
  /report:
    get:
      tags:
        - "Reports"
      summary: "Get list of all Reports"
      description: "Get list of all Reports"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of reports"
          schema:
            allOf:
             - $ref: "#/definitions/Response"
             - properties:
                 data:
                   items:
                     $ref: '#/definitions/ReportGet'
                 message:
                    example: "Successfully requested"
                 message_code:
                    example:  "OK_MSG"

>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
<<<<<<< HEAD
  /users/{user_id}:
    get:
      tags:
        - "Users"
      summary: "Find user by ID"
      description: "Returns a single user"
=======
    post:
      tags:
        - "Reports"
      parameters:
        - in: "body"
          name: "body"
          description: "Report object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/ReportPost"
      summary: "Create a Report"
      description: "Create a Report"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Report succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ReportGet"
                  message:
                    example: "Report successfully created"
                  message_code:
                    example: "REPORT_SUCCESSFULLY_CREATED"
        "409":
          description: "Report already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Report aready exist"
                  message_code:
                    example: "REPORT_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /report/{id}:
    get:
      tags:
        - "Reports"
      summary: "Find report by ID"
      description: "Returns a single Report"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
<<<<<<< HEAD
        - name: "user_id"
          in: "path"
          description: "ID of user to return"
=======
        - name: "id"
          in: "path"
          description: "ID of report to return"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
<<<<<<< HEAD
          description: "Get a single user successfully"
=======
          description: "Get single report successfully"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
<<<<<<< HEAD
                    $ref: "#/definitions/ZoneGet"
        "404":
          description: "User not found"
=======
                    $ref: "#/definitions/ReportGet"
        "404":
          description: "Zone not found"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
<<<<<<< HEAD
                    example: "User not found"
                  message_code:
                    example: "USER_ITEM_NOT_FOUND"
=======
                    example: "Report not found"
                  message_code:
                    example: "REPORT_ITEM_NOT_FOUND"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
<<<<<<< HEAD

            
=======
    delete:
      tags:
        - "Reports"
      summary: "Delete report by ID"
      description: "Returns a deleted report"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of report to delete"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Report successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ReportGet"
                  message:
                    example: "Report successfully deleted"
                  message_code:
                    example: "REPORT_SUCCESSFULLY_DELETED"
        "404":
          description: "Country not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Report not found"
                  message_code:
                    example: "REPORT_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
        tags:
          - "Reports"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of report to update"
            required: true
            type: "string"
            format: "string"
          - in: "body"
            name: "body"
            description: "Report object that needs to be updated"
            required: true
            schema:
              $ref: "#/definitions/ReportPost"
        summary: "Update an Report"
        description: "Update an Report"
        consumes:
          - "application/json"
        produces:
          - "application/json"
        responses:
          "200":
            description: "An updated report"
            schema:
              allOf:
                - $ref: "#/definitions/Response"
                - properties:
                    data:
                      $ref: "#/definitions/ReportGet"
                    message:
                      example: "Report successfully updated"
                    message_code:
                      example: "REPORT_SUCCESSFULLY_UPDATED"
          "409":
            description: "Report already exists"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "Report already exist for the selected site"
                    message_code:
                      example: "REPORT_ALREADY_EXIST"
          "500":
            description: "Internal Server Error"
            schema:
              $ref: "#/definitions/InternalErrorResponse"

          "422":
            description: "Invalid Id"
            schema:
              allOf:
                - $ref: "#/definitions/ErrorResponse"
                - properties:
                    message:
                      example: "Invalid Id"
                    message_code:
                      example: "INVALID_ID"
>>>>>>> c285d8e73cc761d769dbf46bb9c0001de4d7da50
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
  