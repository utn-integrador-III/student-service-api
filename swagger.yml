swagger: "2.0"
info:
  description: "Booking API's Documentation"
  version: "1.0.0"
  title: "Swagger Booking API"
  termsOfService: "Terms"
  contact:
    email: "ebarahona@utn.ac.cr"
host: "localhost:5001"
basePath: "/booking_api"
tags:
  - name: "Zone"
    description: "All Zone's Endpoints"
  - name: "Reports"
  - name: "Users"
    description: "All users's Endpoints"
schemes:
  - "https"
  - "http"
definitions:
  Response:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ZoneGet"
      message:
        type: string
        example: "Successfully requested"
      message_code:
        type: string
        example: "OK_MSG"
  ErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
      message_code:
        type: string
  InvalidIdErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Invalid Id"
      message_code:
        type: string
        example: "INVALID_ID"
  InternalErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Internal server error"
      message_code:
        type: string
        example: "INTERNAL_SERVER_ERROR_MSG"
  ZoneGet:
    type: object
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: Laboratories Zone
  ZonePost:
    type: object
    required:
      - "_id"
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: "Laboratories Zone"
  UsersGet:
    type: object
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: Laboratories Zone
  UsersPost:
    type: object
    required:
      - "_id"
    properties:
      _id:
        type: string
        example: "3823IE3"
      name:
        type: string
        example: "Laboratories"
      description:
        type: string
        example: "Laboratories Zone"
paths:
  /zone:
    get:
      tags:
        - "Zone"
      summary: "Get list of all Zones"
      description: "Get list of all Zones"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of the zones"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Zone"
      parameters:
        - in: "body"
          name: "body"
          description: "Zone object needs to be added"
          required: true
          schema:
            $ref: "#/definitions/ZonePost"
      summary: "Create a Zone"
      description: "Create a Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Zone succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Zone successfully created"
                  message_code:
                    example: "ZONE_SUCCESSFULLY_CREATED"
        "409":
          description: "Zone already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone aready exist"
                  message_code:
                    example: "ZONE_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /zone/{zone_id}:
    get:
      tags:
        - "Zone"
      summary: "Find zone by ID"
      description: "Returns a single Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zone_id"
          in: "path"
          description: "ID of zone to return"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Get single zone successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
        "404":
          description: "Zone not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "ZONE_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Zone"
      summary: "Delete zone by ID"
      description: "Returns a deleted zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zone_id"
          in: "path"
          description: "ID of zone to delete"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Zone successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Zone successfully deleted"
                  message_code:
                    example: "ZONE_SUCCESSFULLY_DELETED"
        "404":
          description: "Country not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "ZONE_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /users:
    get: 
      tags:
        - "Users"
      summary: "Get list of all the users"
      description: "Get list of all users"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of the users"
          schema:
            $ref: "#/definitions/Response"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Users"
      parameters:
        - in: "body"
          name: "body"
          description: "Users Objects need to be added"
          required: true
          schema:
            $ref: "#/definitions/UsersPost"
      summary: "Create an user"
      description: "Create an user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "User was succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/UsersGet"
                  message:
                    example: "User was successfully created"
                  message_code:
                    example: "USER_SUCCESSFULLY_CREATED"
        "409":
          description: "User already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User aready exists"
                  message_code:
                    example: "USER_ALREADY_EXISTS"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
  /users/{user_id}:
    get:
      tags:
        - "Users"
      summary: "Find user by ID"
      description: "Returns a single user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "string"
          format: "string"
      responses:
        "200":
          description: "Get a single user successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
        "404":
          description: "User not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "User not found"
                  message_code:
                    example: "USER_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

            
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
  