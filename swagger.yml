openapi: 3.0.1
info:
  title: Lost&Found API
  description: Lost&Found API demo
  version: 1.0.0
  contact:
    name: L&F
    url: none
    email: semataoe@est.utn.ac.cr
tags:
  - name: zones
  - name: reports
servers:
- url: /
paths:
  /zone:
    get:
      summary: List all ones
      description: Returns all zones
      operationId: getAllZones
      tags:
        - zones
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
              examples:
                application/json:
                  value:
                  - ZoneId: "1234"
                    name: Labs
                    location: module 2
        "400":
          description: Invalid ID supplied
          content: {}
    post:
      summary: Create a Zone
      description: Creates a new Zone
      operationId: createzone
      tags:
        - zones
      requestBody:
        description: Create a new Zone
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
            examples:
              application/json:
                value:
                  ZoneId: "1234"
                  name: labs
                  location: module 3
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Zone'
              examples:
                application/json:
                  value:
                    ZoneId: "1234"
                    name: labs
                    location: module 3
  /zone/{ZoneId}:
    get:
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductByID
      tags:
        - zones
      parameters:
      - name: ZoneId
        in: path
        description: ID of zone to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10"
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Zone'
              examples:
                application/json:
                  value:
                    ZoneId: "10"
                    name: labs
                    location: module 5
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Zone not found
          content: {}
    put:
      tags:
        - zones
      parameters:
      - name: ZoneId
        in: path
        description: ID of report to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10"
      summary: Update an existing Zone
      description: Update an existing Zone by Id
      operationId: updatezone
      requestBody:
        description: Update an existent zone
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
          application/xml:
            schema:
              $ref: '#/components/schemas/Zone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception      
    delete:
      tags:
        - zones
      summary: Delete zone by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteZone
      parameters:
        - name: ZoneId
          in: path
          description: ID of the zone that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found  
  /report: 
    get:
      summary: List all ones
      description: Returns all reports
      operationId: getAllreports
      tags:
        - reports
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
              examples:
                application/json:
                  value:
                  - ReportId: "10"
                    ReportedBy: "Edgard"
                    ZoneId: "29"
                    location: "located at..."
                    description: "Telefono celular"
                    photo: array
        "400":
          description: Invalid ID supplied
          content: {}
    post:
      summary: Create a Report
      description: Creates a new Report
      operationId: createreport
      tags:
        - reports
      requestBody:
        description: Create a new Report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
            examples:
              application/json:
                value:
                  ReportId: "10"
                  ReportedBy: "Edgard"
                  ZoneId: "29"
                  location: "located at..."
                  description: "Telefono celular"
                  photo: array
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Report'
              examples:
                application/json:
                  value:
                    ReportId: "10"
                    ReportedBy: "Edgard"
                    ZoneId: "29"
                    location: "located at..."
                    description: "Telefono celular"
                    photo: array
  /report/{ReportId}:
    get:
      summary: Find report by ID
      description: Returns a single report
      operationId: getReportById
      tags:
        - reports
      parameters:
      - name: ReportId
        in: path
        description: ID of report to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10"
      responses:
        "200":
          description: successful operation
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Report'
              examples:
                application/json:
                  value:
                    ReportId: "10"
                    ReportedBy: "Edgard"
                    ZoneId: "29"
                    location: "located at..."
                    description: "Telefono celular"
                    photo: array
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Zone not found
          content: {}
    put:
      tags:
        - reports
      parameters:
      - name: ReportId
        in: path
        description: ID of report to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "10"
      summary: Update an existing Report
      description: Update an existing Report by Id
      operationId: updateReport
      requestBody:
        description: Update an existent report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
          application/xml:
            schema:
              $ref: '#/components/schemas/Zone'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception      
    delete:
      tags:
        - reports
      summary: Delete report by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deletedReport
      parameters:
        - name: ReportId
          in: path
          description: ID of the report that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found 
components:
  schemas:
    Zone:
      required:
      - ZoneId
      type: object
      properties:
        ZoneId:
          type: string
        name:
          type: string
        location:
          type: string
    Report:
      required:
      - ReportId
      type: object
      properties:
        ReportId:
          type: string
        ReportedBy:
          type: string
        ZoneId:
          type: string
        location:
          type: string
        description:
          type: string
        photo: 
          type: array
          items: 
              $ref: '#/components/schemas/Zone' 
        