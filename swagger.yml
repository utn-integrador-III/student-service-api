#This is the header of the file, whose main goal is to display important information
#about the .yml file.
swagger: "2.0"
info:
  description: "Student Service API's Documentation"
  version: "1.0.0"
  title: "Swagger Student Service API"
  termsOfService: "Terms"
  contact:
    email: "ebarahona@utn.ac.cr"
host: "localhost:5001"
basePath: "/booking_api"
#The tags are the identifiers for the paths that are created, this will assign a path with a unique tag,
#meaning that, an specific end-point belongs to a tag or identifier
tags:
  - name: "Zones"
    description: "All Zone's Endpoints"
  - name: "LostObjects"
    description: "All Lost Object's Endpoints"
  - name: "Categories"
    description: "All categories endpoints"
#the schemes will define the protocol that are been used by the end-points inside the API
schemes:
  - "https"
  - "http"
#The definitions will display the information that the end-points will return, all along with the
#corresponding messages of the errors.
definitions:
  keeperResponse:
    type: object
    properties:
      accepted:
        type: string
        example: False
      user_email:
        type: string
        example: "semataoe@est.utn.ac.cr"
  Response:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions"
      message:
        type: string
        example: "Successfully requested"
      message_code:
        type: string
        example: "OK_MSG"
  ErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
      message_code:
        type: string
  InvalidIdErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Invalid Id"
      message_code:
        type: string
        example: "INVALID_ID"
  InternalErrorResponse:
    type: object
    properties:
      data:
        type: string
        example: null
      message:
        type: string
        example: "Internal server error"
      message_code:
        type: string
        example: "INTERNAL_SERVER_ERROR_MSG"
  ZoneGet:
    type: object
    properties:
      _id:
        type: string
        example: "0183IEHU#&#J"
      name:
        type: string
        example: "Laboratories"
      location:
        type: string
        example: Laboratories Zone
  ZoneGetById:
    type: object
    properties:
      _id:
        type: integer
        example: 34
      name:
        type: string
        example: "Laboratories"
  ZonePost:
    type: object
    required:
      - "name"
    properties:
      name:
        type: string
        example: "Laboratories"
      location:
        type: string
        example: "Laboratories Zone"
  LostObjectGet:
    type: object
    properties:
      _id:
        type: string
        example: "923UThe&#$83"
      name:
        type: string
        example: "Phone"
      description:
        type: string
        example: "Iphone 12 proMax with yellow case"
      status:
        type: string
        example: "ONF"
      creation_date:
        type: string
        example: "2024-06-08T00:00:00.000Z"
      attachment_path:
        type: string
        example: "/lostObject"
      claimed_date:
        type: string
        example: "null"
      claimer:
        type: string
        example: "None"
      SafeKeeper:
        type: array
        items:
          $ref: "#/definitions/keeperResponse"
      user_email:
        type: string
        example: "diferretomo@utn.ac.cr"
  LostObjectGetById:
    type: object
    properties:
      _id:
        type: string
        example: "923UThe&#$83"
      name:
        type: string
        example: "Phone"
      description:
        type: string
        example: "Iphone 12 proMax with yellow case"
      status:
        type: string
        example: "ONF"
      creation_date:
        type: string
        example: "2024-06-08T00:00:00.000Z"
      attachment_path:
        type: string
        example: "/lostObject"
      claimed_date:
        type: string
        example: "null"
      claimer:
        type: string
        example: "None"
      SafeKeeper:
        type: array
        items:
          $ref: "#/definitions/keeperResponse"
      user_email:
        type: string
        example: "diferretomo@est.utn.ac.cr"
  LostObjectPost:
    type: object
    required:
      - "_id"
    properties:
      name:
        type: string
        example: "Phone"
      description:
        type: string
        example: "Iphone 12 proMax with yellow case"
      status:
        type: string
        example: "ONF"
      creation_date:
        type: string
        example: "2024-06-08T00:00:00.000Z"
      attachment_path:
        type: string
        example: "/lostObject"
      claimed_date:
        type: string
        example: "null"
      claimer:
        type: string
        example: "None"
      SafeKeeper:
        type: array
        items:
          $ref: "#/definitions/keeperResponse"
      user_email:
        type: string
        example: "diferretomo@utn.ac.cr"
  CategoryGet:
    type: object
    properties:
      _id:
        type: string
        example: "238H$Fj3KJD"
      name:
        type: string
        example: "Celulares"
  CategoryGetById:
    type: object
    properties:
      _id:
        type: string
        example: "238H$Fj3KJD"
      name:
        type: string
        example: "Celulares"
  CategoryPost:
    type: object
    required:
      - "name"
    properties:
      name:
        type: string
        example: "Celulares"
#The paths are the ones with all the information of the CRUD methods of the end-points
paths:
  /zone:
    get:
      tags:
        - "Zones"
      summary: "Get list of all zones"
      description: "Get list of all zones"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of zones"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Successfully requested"
                  message_code:
                    example: "OK_MSG"

        "400":
          description: "No zones found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zones not found"
                  message_code:
                    example: "NO_DATA"

        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Zones"
      parameters:
        - in: "body"
          name: "body"
          description: "Zone object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/ZonePost"
      summary: "Create a Zone"
      description: "Create a Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Zone succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Country successfully created"
                  message_code:
                    example: "COUNTRY_SUCCESSFULLY_CREATED"
        "409":
          description: "Zone already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone aready exist"
                  message_code:
                    example: "ZONE_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
      tags:
        - "Zones"
      parameters:
        - in: "body"
          name: "body"
          description: "Zone object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/ZoneGetById"
      summary: "Update a Zone"
      description: "Update a Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "An updated zone"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
                  message:
                    example: "Zone successfully updated"
                  message_code:
                    example: "ZONE_SUCCESSFULLY_UPDATED"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

        "422":
          description: "Invalid Id"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Invalid Id"
                  message_code:
                    example: "INVALID_ID"
  /zone/{zoneId}:
    get:
      tags:
        - "Zones"
      summary: "Find zone by ID"
      description: "Returns a single Zone"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone to return"
          required: true
          type: "integer"
          format: "integer"
      responses:
        "200":
          description: "Get single zone successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/ZoneGet"
        "400":
          description: "Zone not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "NO_DATA"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Zones"
      summary: "Delete zone by ID"
      description: "Delete a zone by ID"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "zoneId"
          in: "path"
          description: "ID of zone to delete"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Zone successfully deleted"
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
              message:
                type: string
                example: "Zone successfully deleted"
              message_code:
                type: string
                example: "ZONE_SUCCESSFULLY_DELETED"
        "400":
          description: "Country not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Zone not found"
                  message_code:
                    example: "ZONE_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

  /lostObject:
    get:
      tags:
        - "LostObjects"
      summary: "Get list of all Reports"
      description: "Get list of all Reports"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of lost objects"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/LostObjectGet"
                  message:
                    example: "Successfully requested"
                  message_code:
                    example: "OK_MSG"

        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "LostObjects"
      parameters:
        - in: "body"
          name: "body"
          description: "LostObject object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/LostObjectPost"
      summary: "Generate a Lost Object"
      description: "Generate a Lost Object"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Lost Object succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LostObjectGet"
                  message:
                    example: "Lost Object successfully created"
                  message_code:
                    example: "LOST_OBJECT_SUCCESSFULLY_CREATED"
        "409":
          description: "Lost Object already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Lost Object aready exist"
                  message_code:
                    example: "LOST_OBJECT_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
      tags:
        - "LostObjects"
      parameters:
        - in: "body"
          name: "body"
          description: "Lost object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/LostObjectGetById"
      summary: "Update an Lost Object"
      description: "Update an Lost Object"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "An updated LostObject"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/LostObjectGet"
                  message:
                    example: "LostObject successfully updated"
                  message_code:
                    example: "LOST_OBJECT_SUCCESSFULLY_UPDATED"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
        "422":
          description: "Invalid Id"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Invalid Id"
                  message_code:
                    example: "INVALID_ID"

  /category:
    get:
      tags:
        - "Categories"
      summary: "Get list of all Categories"
      description: "Get list of all Categories"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "A list of Categories"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    items:
                      $ref: "#/definitions/CategoryGet"
                  message:
                    example: "Successfully requested"
                  message_code:
                    example: "OK_MSG"

        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    post:
      tags:
        - "Categories"
      parameters:
        - in: "body"
          name: "body"
          description: "Role object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/CategoryPost"
      summary: "Create a Category"
      description: "Create a Category"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "Category Succesfully created"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/CategoryGet"
                  message:
                    example: "Category successfully created"
                  message_code:
                    example: "CATEGORY_SUCCESSFULLY_CREATED"
        "409":
          description: "Category already exists"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Category already exist"
                  message_code:
                    example: "CATEGORY_ALREADY_EXIST"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    put:
      tags:
        - "Categories"
      parameters:
        - in: "body"
          name: "body"
          description: "Category object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/CategoryGetById"
      summary: "Update an Category"
      description: "Update an Category"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "An updated category"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/CategoryGet"
                  message:
                    example: "Category successfully updated"
                  message_code:
                    example: "CATEGORY_SUCCESSFULLY_UPDATED"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

        "422":
          description: "Invalid Id"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Invalid Id"
                  message_code:
                    example: "INVALID_ID"
  /category/{id}:
    get:
      tags:
        - "Categories"
      summary: "Find category by ID"
      description: "Returns a single Category"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of Category to return"
          required: true
          type: "integer"
          format: "integer"
      responses:
        "200":
          description: "Get single category successfully"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/CategoryGet"
        "404":
          description: "Category not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Category not found"
                  message_code:
                    example: "CATEGORY_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"
    delete:
      tags:
        - "Categories"
      summary: "Delete Category by ID"
      description: "Returns a deleted category"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of category to delete"
          required: true
          type: "integer"
          format: "integer"
      responses:
        "200":
          description: "Category successfully deleted"
          schema:
            allOf:
              - $ref: "#/definitions/Response"
              - properties:
                  data:
                    $ref: "#/definitions/CategoryGet"
                  message:
                    example: "Category successfully deleted"
                  message_code:
                    example: "CATEGORY_SUCCESSFULLY_DELETED"
        "404":
          description: "Category not found"
          schema:
            allOf:
              - $ref: "#/definitions/ErrorResponse"
              - properties:
                  message:
                    example: "Category not found"
                  message_code:
                    example: "CATEGORY_ITEM_NOT_FOUND"
        "422":
          description: "Invalid Object Id"
          schema:
            $ref: "#/definitions/InvalidIdErrorResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/InternalErrorResponse"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
